// main dart code
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'generated/app_localizations.dart';
import 'language_selection_page.dart';
import 'core/theme/colors.dart';
import 'screens/main_screen.dart';
import 'business_registration_page.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final GlobalKey<NavigatorState> _navKey = GlobalKey<NavigatorState>(); // ✅ for safe navigation

  Locale? _locale;
  bool _showLanguageSelection = true;

  // Function to update the app locale and navigate
  void setLocale(Locale locale) {
    // 1) Apply locale (do NOT flip _showLanguageSelection yet)
    setState(() {
      _locale = locale;
    });

    // 2) Replace Language screen with Registration using navigatorKey (context-safe)
    _navKey.currentState!.pushReplacement(
      MaterialPageRoute(
        builder: (_) => BusinessRegistrationPage(
          onFinished: () {
            // 3) After registration → go to Main
            _navKey.currentState!.pushReplacement(
              MaterialPageRoute(builder: (_) => const MainScreen()),
            );

            // 4) Now mark language as done for future launches
            setState(() {
              _showLanguageSelection = false;
            });
          },
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      navigatorKey: _navKey, // ✅ attach key
      locale: _locale,
      supportedLocales: AppLocalizations.supportedLocales,
      localizationsDelegates: const [
        AppLocalizations.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      theme: ThemeData(
        primaryColor: AppColors.primary,
        scaffoldBackgroundColor: AppColors.backgroundLight,
        appBarTheme: AppBarTheme(
          backgroundColor: AppColors.primary,
          foregroundColor: AppColors.textPrimary,
        ),
        textTheme: const TextTheme(
          bodyLarge: TextStyle(color: AppColors.textPrimary),
          bodyMedium: TextStyle(color: AppColors.textPrimary),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.primary,
            foregroundColor: AppColors.textOnPrimary,
          ),
        ),
      ),
      home: _showLanguageSelection
          ? LanguageSelectionPage(
              onLanguageSelected: (code) => setLocale(Locale(code)),
            )
          : const MainScreen(),
    );
  }
}






















// language selection page
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class LanguageSelectionPage extends StatelessWidget {
  final Function(String) onLanguageSelected;

  LanguageSelectionPage({super.key, required this.onLanguageSelected});

  final List<Map<String, String>> languages = [
    {'name': 'English', 'code': 'en'},
    {'name': 'हिन्दी', 'code': 'hi'},
    {'name': 'ਪੰਜਾਬੀ', 'code': 'pa'},
    {'name': 'मराठी', 'code': 'mr'},
    {'name': 'தமிழ்', 'code': 'ta'},
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              const SizedBox(height: 60),

              // App Logo
              Icon(Icons.language, size: 90, color: Colors.brown),

              const SizedBox(height: 20),

              // Title
              Text(
                "Choose Your Language",
                style: GoogleFonts.poppins(
                  fontSize: 24,
                  fontWeight: FontWeight.w600,
                  color: Colors.brown[800],
                ),
              ),

              const SizedBox(height: 10),

              // Subtitle
              Text(
                "Select a language for a comfortable experience",
                textAlign: TextAlign.center,
                style: GoogleFonts.poppins(
                  fontSize: 14,
                  color: Colors.grey[600],
                ),
              ),

              const SizedBox(height: 40),

              // Language list
              Expanded(
                child: ListView.separated(
                  itemCount: languages.length,
                  separatorBuilder: (_, __) => const SizedBox(height: 16),
                  itemBuilder: (context, index) {
                    final lang = languages[index];
                    return InkWell(
                      onTap: () {
                        // Call the callback to update locale
                        onLanguageSelected(lang['code']!);
                      },
                      borderRadius: BorderRadius.circular(12),
                      child: Container(
                        padding: const EdgeInsets.symmetric(
                            vertical: 16, horizontal: 20),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(12),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.15),
                              blurRadius: 8,
                              offset: const Offset(0, 4),
                            ),
                          ],
                          border: Border.all(color: Colors.brown.shade100),
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              lang['name']!,
                              style: GoogleFonts.poppins(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                color: Colors.brown[700],
                              ),
                            ),
                            const Icon(Icons.arrow_forward_ios,
                                size: 16, color: Colors.brown),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}










































// bussiness registration page
import 'package:flutter/material.dart';
import 'generated/app_localizations.dart';
import 'dart:async';
import 'package:flutter/services.dart';
import 'package:my_business_app/screens/main_screen.dart';


class BusinessRegistrationPage extends StatefulWidget {
  final VoidCallback onFinished;
  const BusinessRegistrationPage({super.key, required this.onFinished});

  @override
  State<BusinessRegistrationPage> createState() => _BusinessRegistrationPageState();
}

class _BusinessRegistrationPageState extends State<BusinessRegistrationPage> {
  final int _cooldownSeconds = 30; // how long before user can resend
  int _resendIn = 0; // seconds remaining; 0 means can send now
  Timer? _cooldownTimer; // ticks every second during cooldown

  final _formKey = GlobalKey<FormState>();

  final TextEditingController _fullNameController = TextEditingController();
  final TextEditingController _shopNameController = TextEditingController();
  final TextEditingController _mobileController = TextEditingController();
  final TextEditingController _otpController = TextEditingController();

  String? _selectedService;
  String _countryCode = '+91';
  bool _isOtpSent = false;
  final String _dummyOtp = "123456";

  final List<String> services = [
    'groceryAndEssentials',
    'pharmacyAndHealth',
    'electronics',
    'fashionAndClothing',
    'foodAndBeverages',
    'homeAndGarden',
    'beautyAndPersonalCare',
    'automotive',
    'professionalServices',
    'other',
  ];

  void _sendOtp({bool fromAuto = false}) {
    final phone = _mobileController.text.trim();

    // basic guard
    if (phone.length != 10) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            AppLocalizations.of(context)!.pleaseEnterMobileNumberFirst,
          ),
        ),
      );
      return;
    }

    // if auto-triggered and we've already sent once, skip
    if (fromAuto && _isOtpSent) return;

    // block resends during cooldown
    if (_resendIn > 0) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please wait $_resendIn s to resend OTP')),
      );
      return;
    }

    // mark sent + start cooldown
    setState(() {
      _isOtpSent = true;
    });
    _startCooldown();

    // (fake send) show confirmation
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(AppLocalizations.of(context)!.otpSentToYourMobileNumber),
      ),
    );
  }

  void _submit() {
    if (_formKey.currentState!.validate()) {
      // ✅ Check OTP before showing success
      if (_otpController.text != _dummyOtp) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("❌ Invalid OTP. Please enter 123456")),
        );
        return; // ⛔ Stop execution here if OTP is wrong
      }

      // ✅ If OTP is correct → success
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            AppLocalizations.of(context)!.accountCreatedSuccessfully,
          ),
        ),
      );

      print(
        'Registration data: Full Name=${_fullNameController.text}, '
        'Shop Name=${_shopNameController.text}, '
        'Service=$_selectedService, '
        'Mobile=$_countryCode${_mobileController.text}, '
        'OTP=${_otpController.text}',
      );

      widget.onFinished();

    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Gradient background
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFF667eea), Color(0xFF764ba2)],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
          ),

          // Floating circles
          Positioned(top: 100, left: 50, child: _floatingCircle(60)),
          Positioned(bottom: 150, right: 40, child: _floatingCircle(80)),
          Positioned(bottom: 100, left: 100, child: _floatingCircle(40)),

          // Main form
          Center(
            child: SingleChildScrollView(
              padding: EdgeInsets.all(20),
              child: Container(
                padding: EdgeInsets.all(24),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.95),
                  borderRadius: BorderRadius.circular(30),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black26,
                      blurRadius: 20,
                      offset: Offset(0, 10),
                    ),
                  ],
                ),
                child: Form(
                  key: _formKey,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // Logo
                      Container(
                        width: 64,
                        height: 64,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(16),
                          gradient: LinearGradient(
                            colors: [Color(0xFFFF6B6B), Color(0xFF4ECDC4)],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                        ),
                        child: Center(
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(16),
                            child: Image.asset(
                              'assets/images/logo.png',
                              fit: BoxFit.cover,
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: 16),
                      Text(
                        AppLocalizations.of(context)!.joinOurNetwork,
                        style: TextStyle(
                          fontSize: 26,
                          fontWeight: FontWeight.bold,
                          color: Colors.grey[800],
                        ),
                      ),
                      SizedBox(height: 6),
                      Text(
                        AppLocalizations.of(
                          context,
                        )!.registerYourBusinessInMinutes,
                        style: TextStyle(fontSize: 16, color: Colors.grey[600]),
                      ),
                      SizedBox(height: 24),

                      // Full Name
                      _buildTextField(
                        controller: _fullNameController,
                        label: AppLocalizations.of(context)!.fullName,
                        validator: (val) => val!.isEmpty
                            ? AppLocalizations.of(context)!.enterFullName
                            : null,
                      ),

                      // Shop Name
                      _buildTextField(
                        controller: _shopNameController,
                        label: AppLocalizations.of(context)!.shopName,
                        validator: (val) => val!.isEmpty
                            ? AppLocalizations.of(context)!.enterShopName
                            : null,
                      ),

                      // Services Dropdown
                      DropdownButtonFormField<String>(
                        initialValue: _selectedService,
                        hint: Text(
                          AppLocalizations.of(context)!.selectYourCategory,
                        ),
                        items: services
                            .map(
                              (s) => DropdownMenuItem(
                                value: s,
                                child: Text(_getServiceLabel(context, s)),
                              ),
                            )
                            .toList(),
                        onChanged: (val) =>
                            setState(() => _selectedService = val),
                        validator: (val) => val == null
                            ? AppLocalizations.of(context)!.pleaseSelectAService
                            : null,
                        decoration: InputDecoration(
                          contentPadding: EdgeInsets.symmetric(
                            horizontal: 16,
                            vertical: 20,
                          ),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          filled: true,
                          fillColor: Colors.grey[100],
                        ),
                      ),
                      SizedBox(height: 16),

                      // Mobile + Country code
                      Row(
                        children: [
                          SizedBox(
                            width: 80,
                            child: DropdownButtonFormField<String>(
                              initialValue: _countryCode,
                              items: ['+91', '+1', '+44']
                                  .map(
                                    (c) => DropdownMenuItem(
                                      value: c,
                                      child: Text(c),
                                    ),
                                  )
                                  .toList(),
                              onChanged: (val) =>
                                  setState(() => _countryCode = val!),
                              decoration: InputDecoration(
                                contentPadding: EdgeInsets.symmetric(
                                  horizontal: 12,
                                  vertical: 16,
                                ),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(16),
                                ),
                                filled: true,
                                fillColor: Colors.grey[100],
                              ),
                            ),
                          ),
                          SizedBox(width: 10),
                          Expanded(
                            child: TextFormField(
                              controller: _mobileController,
                              keyboardType: TextInputType.phone,
                              maxLength: 10,
                              inputFormatters: [
                                FilteringTextInputFormatter.digitsOnly,
                                LengthLimitingTextInputFormatter(10),
                              ],
                              validator: (val) => val!.length != 10
                                  ? AppLocalizations.of(
                                      context,
                                    )!.enter10DigitMobile
                                  : null,
                              onChanged: (val) {
                                if (val.length == 10 && !_isOtpSent) {
                                  _sendOtp(
                                    fromAuto: true,
                                  ); // auto-send only the first time
                                }
                              },

                              decoration: InputDecoration(
                                labelText: AppLocalizations.of(
                                  context,
                                )!.mobileNumber,
                                filled: true,
                                fillColor: Colors.grey[100],
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(16),
                                ),
                                counterText: '',
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(height: 16),

                      // OTP
                      Container(
                        padding: EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: Colors.grey[100],
                          borderRadius: BorderRadius.circular(16),
                          border: Border.all(
                            color: Colors.grey[300]!,
                            style: BorderStyle.solid,
                          ),
                        ),
                        child: Column(
                          children: [
                            Text(
                              AppLocalizations.of(context)!.enterOtp,
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                              ),
                            ),
                            SizedBox(height: 8),
                            TextFormField(
                              controller: _otpController,
                              maxLength: 6,
                              keyboardType: TextInputType.number,
                              inputFormatters: [
                                FilteringTextInputFormatter.digitsOnly,
                                LengthLimitingTextInputFormatter(6),
                              ],
                              validator: (val) => val!.length != 6
                                  ? AppLocalizations.of(context)!.enter6DigitOtp
                                  : null,
                              decoration: InputDecoration(
                                labelText: '- - - - - -',
                                filled: true,
                                fillColor: Colors.grey[100],
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(16),
                                ),
                                counterText: '',
                              ),
                            ),

                            TextButton(
                              onPressed: (_isOtpSent && _resendIn > 0)
                                  ? null
                                  : () => _sendOtp(),
                              child: Text(
                                !_isOtpSent
                                    ? AppLocalizations.of(
                                        context,
                                      )!.didntReceiveSendOtp
                                    : (_resendIn > 0
                                          ? 'Resend in ${_resendIn}s'
                                          : AppLocalizations.of(
                                              context,
                                            )!.resendOtp),
                                style: TextStyle(
                                  color: (_isOtpSent && _resendIn > 0)
                                      ? Colors.grey
                                      : Colors.blue,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      SizedBox(height: 20),

                      // Submit Button
                      ElevatedButton(
                        onPressed: _submit,
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.symmetric(vertical: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          backgroundColor: Colors.deepPurple,
                        ),
                        child: Center(
                          child: Text(
                            AppLocalizations.of(
                              context,
                            )!.createAccount.toUpperCase(),
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: 12),

                      // Terms
                      Text(
                        AppLocalizations.of(context)!.termsAndPrivacy,
                        textAlign: TextAlign.center,
                        style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _floatingCircle(double size) {
    return Container(
      width: size,
      height: size,
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.1),
        shape: BoxShape.circle,
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    int? maxLength,
    TextInputType keyboardType = TextInputType.text,
    String? Function(String?)? validator,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        maxLength: maxLength,
        keyboardType: keyboardType,
        validator: validator,
        decoration: InputDecoration(
          labelText: label,
          filled: true,
          fillColor: Colors.grey[100],
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(16)),
          counterText: '',
        ),
      ),
    );
  }

  @override
  void dispose() {
    _cooldownTimer?.cancel();
    _fullNameController.dispose();
    _shopNameController.dispose();
    _mobileController.dispose();
    _otpController.dispose();
    super.dispose();
  }
  
  void _startCooldown() {}
}

String _getServiceLabel(BuildContext context, String key) {
  switch (key) {
    case 'groceryAndEssentials':
      return AppLocalizations.of(context)!.groceryAndEssentials;
    case 'pharmacyAndHealth':
      return AppLocalizations.of(context)!.pharmacyAndHealth;
    case 'electronics':
      return AppLocalizations.of(context)!.electronics;
    case 'fashionAndClothing':
      return AppLocalizations.of(context)!.fashionAndClothing;
    case 'foodAndBeverages':
      return AppLocalizations.of(context)!.foodAndBeverages;
    case 'homeAndGarden':
      return AppLocalizations.of(context)!.homeAndGarden;
    case 'beautyAndPersonalCare':
      return AppLocalizations.of(context)!.beautyAndPersonalCare;
    case 'automotive':
      return AppLocalizations.of(context)!.automotive;
    case 'professionalServices':
      return AppLocalizations.of(context)!.professionalServices;
    case 'other':
      return AppLocalizations.of(context)!.other;
    default:
      return key; // fallback
  }
}




















































//main screen dart code
import 'package:flutter/material.dart';
import 'package:my_business_app/features/profile/profile_page.dart';



class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  int _currentIndex = 0;

  // Pages are content-only (no Scaffold inside)
  final List<Widget> _pages = <Widget>[
  const HomePage(),
  const OrderPage(),
  const ListingPage(),
  const ProfileScreen(), // <-- this must match the class name in profile_page.dart
];


  

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      
      body: SafeArea(
        child: IndexedStack(
          index: _currentIndex,
          children: _pages,
        ),
      ),
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          boxShadow: <BoxShadow>[
            BoxShadow(
              color: Colors.black.withOpacity(0.08),
              blurRadius: 20,
              offset: const Offset(0, -4),
            ),
          ],
          border: const Border(
            top: BorderSide(
              color: Color(0xfff1f1f1),
              width: 1,
            ),
          ),
        ),
        child: SafeArea(
          child: Container(
            height: 90,
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: <Widget>[
                NavItem(
                  index: 0,
                  icon: Icons.home_rounded,              // NEW
                  label: 'HOME',
                  isActive: _currentIndex == 0,
                  onTap: () => setState(() => _currentIndex = 0),
                ),
                NavItem(
                  index: 1,
                  icon: Icons.receipt_long_rounded,      // NEW
                  label: 'ORDERS',
                  isActive: _currentIndex == 1,
                  onTap: () => setState(() => _currentIndex = 1),
                ),
                NavItem(
                  index: 2,
                  icon: Icons.grid_view_rounded,         // NEW
                  label: 'LISTING',
                  isActive: _currentIndex == 2,
                  onTap: () => setState(() => _currentIndex = 2),
                ),
                NavItem(
                  index: 3,
                  icon: Icons.account_circle_rounded,    // NEW
                  label: 'PROFILE',
                  isActive: _currentIndex == 3,
                  onTap: () => setState(() => _currentIndex = 3),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class NavItem extends StatelessWidget {
  final int index;
  final IconData icon;
  final String label;
  final bool isActive;
  final VoidCallback onTap;

  const NavItem({
    super.key,
    required this.index,
    required this.icon,
    required this.label,
    required this.isActive,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 8),
        decoration: BoxDecoration(
          color: isActive ? const Color(0xfff8f7ff) : Colors.transparent,
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: <Widget>[
            Icon(
              icon,
              size: 24,
              color: isActive ? const Color(0xFF008080) : const Color(0xff8b8b8b),
            ),
            const SizedBox(height: 4),
            Text(
              label,
              style: TextStyle(
                fontSize: 10,
                fontWeight: FontWeight.w600,
                letterSpacing: 0.2,
                color: isActive ? const Color(0xFF008080) : const Color(0xff8b8b8b),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/* =========================
 * CONTENT-ONLY PAGES BELOW
 * ========================= */

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return const SizedBox.shrink();
  }
}

class OrderPage extends StatelessWidget {
  const OrderPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const SizedBox.shrink();
  }
}

class ListingPage extends StatelessWidget {
  const ListingPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const SizedBox.shrink();
  }
}









































// profile page code
import 'package:flutter/material.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  bool isOpen = true;
  String timings = '10:00 AM – 9:00 PM';

  String _shopName = 'Tech Haven Electronics';
  String _phoneNumber = '+91 98765 43210';
  String _address = '456 Innovation Drive, Pune';
  String? _coverImageUrl; // null => gradient only

  void
   _pushFull(Widget page) {
    Navigator.of(context).push(
      PageRouteBuilder<void>(
        transitionDuration: const Duration(milliseconds: 320),
        reverseTransitionDuration: const Duration(milliseconds: 260),
        pageBuilder: (_, __, ___) => page,
        transitionsBuilder: (_, anim, __, child) {
          final curved = CurvedAnimation(
            parent: anim,
            curve: Curves.easeOutCubic,
          );
          return SlideTransition(
            position: Tween<Offset>(
              begin: const Offset(0, 1),
              end: Offset.zero,
            ).animate(curved),
            child: child,
          );
        },
      ),
    );
  }

  void _editAllInfo() async {
    final formKey = GlobalKey<FormState>();
    final name = TextEditingController(text: _shopName);
    final phone = TextEditingController(text: _phoneNumber);
    final addr = TextEditingController(text: _address);
    final time = TextEditingController(text: timings);

    final ok = await showDialog<bool>(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('Edit Shop Info'),
        content: SingleChildScrollView(
          child: Form(
            key: formKey,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextFormField(
                  controller: name,
                  decoration: const InputDecoration(
                    labelText: 'Shop Name',
                    border: OutlineInputBorder(),
                  ),
                  validator: (v) => (v == null || v.trim().isEmpty)
                      ? 'Enter shop name'
                      : null,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  controller: phone,
                  decoration: const InputDecoration(
                    labelText: 'Phone Number',
                    border: OutlineInputBorder(),
                  ),
                  keyboardType: TextInputType.phone,
                  validator: (v) {
                    final t = (v ?? '').replaceAll(RegExp(r'\s+'), '');
                    return (t.length < 10) ? 'Enter valid phone' : null;
                  },
                ),
                const SizedBox(height: 12),
                TextFormField(
                  controller: addr,
                  decoration: const InputDecoration(
                    labelText: 'Address',
                    border: OutlineInputBorder(),
                  ),
                  maxLines: 2,
                  validator: (v) =>
                      (v == null || v.trim().isEmpty) ? 'Enter address' : null,
                ),
                const SizedBox(height: 12),
                TextFormField(
                  controller: time,
                  decoration: const InputDecoration(
                    labelText: 'Shop Timings (e.g., 9:00 AM – 9:00 PM)',
                    border: OutlineInputBorder(),
                  ),
                  validator: (v) =>
                      (v == null || v.trim().isEmpty) ? 'Enter timings' : null,
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(ctx, false),
            child: const Text('Cancel'),
          ),
          FilledButton(
            onPressed: () {
              if (formKey.currentState!.validate()) Navigator.pop(ctx, true);
            },
            child: const Text('Save'),
          ),
        ],
      ),
    );

    if (ok == true) {
      if (!mounted) return;
      setState(() {
        _shopName = name.text.trim();
        _phoneNumber = phone.text.trim();
        _address = addr.text.trim();
        timings = time.text.trim();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;

    return ListView(

        padding: EdgeInsets.zero,
        children: [
          // -------- Banner (gradient first, optional image on top) --------
          SizedBox(
            height: 160,
            child: Stack(
              fit: StackFit.expand,
              children: [
                Container(
                  decoration: const BoxDecoration(
                    gradient: LinearGradient(
                      colors: [Color(0xFF7DB2FF), Color(0xFF4A72DA)],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                  ),
                ),
                if (_coverImageUrl != null && _coverImageUrl!.isNotEmpty)
                  Image.network(
                    _coverImageUrl!,
                    fit: BoxFit.cover,
                    errorBuilder: (_, __, ___) => const SizedBox.shrink(),
                  ),
                Align(
                  alignment: Alignment.center, // Moved to center
                  child: InkWell(
                    borderRadius: BorderRadius.circular(24),
                    onTap: () => ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Change Banner tapped')),
                    ),
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 8,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.92),
                        borderRadius: BorderRadius.circular(24),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.10),
                            blurRadius: 10,
                            offset: const Offset(0, 4),
                          ),
                        ],
                        border: Border.all(color: Colors.white),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: const [
                          Icon(
                            Icons.photo_camera_rounded,
                            size: 18,
                            color: Colors.black87,
                          ),
                          SizedBox(width: 8),
                          Text(
                            'Change Banner',
                            style: TextStyle(fontWeight: FontWeight.w600),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),

          // -------- Header card --------
          Container(
            transform: Matrix4.translationValues(0, -28, 0),
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: AppCard(
              padding: const EdgeInsets.all(14),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // DP + button
                      Stack(
                        clipBehavior: Clip.none,
                        children: [
                          const CircleAvatar(
                            radius: 36,
                            backgroundColor: Color(0xFFE9EEF8),
                            child: Icon(
                              Icons.person_rounded,
                              size: 40,
                              color: Colors.black38,
                            ),
                          ),
                          Positioned(
                            bottom: -2,
                            right: -2,
                            child: InkWell(
                              onTap: () =>
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(
                                      content: Text('Change DP tapped'),
                                    ),
                                  ),
                              child: Container(
                                padding: const EdgeInsets.all(4),
                                decoration: BoxDecoration(
                                  color: cs.primary,
                                  shape: BoxShape.circle,
                                  border: Border.all(
                                    color: Colors.white,
                                    width: 2,
                                  ),
                                ),
                                child: const Icon(
                                  Icons.add_rounded,
                                  size: 18,
                                  color: Colors.white,
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(width: 12),

                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              _shopName,
                              style: const TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.w800,
                              ),
                            ),
                            const SizedBox(height: 2),
                            _IconLine(
                              icon: Icons.phone_rounded,
                              text: _phoneNumber,
                              onTap: () {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('Dialer will open later'),
                                  ),
                                );
                              },
                            ),
                            const SizedBox(height: 2),
                            _IconLine(
                              icon: Icons.location_on_rounded,
                              text: _address,
                              onTap: () {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('Maps will open later'),
                                  ),
                                );
                              },
                            ),
                          ],
                        ),
                      ),

                      Column(
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Text(
                                isOpen ? 'Open' : 'Closed',
                                style: TextStyle(
                                  fontWeight: FontWeight.w700,
                                  color: isOpen ? Colors.green : Colors.red,
                                ),
                              ),
                              const SizedBox(width: 6),
                              Switch.adaptive(
                                value: isOpen,
                                onChanged: (v) => setState(() => isOpen = v),
                              ),
                            ],
                          ),
                          Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              const Icon(
                                Icons.schedule_rounded,
                                size: 16,
                                color: Colors.black54,
                              ),
                              const SizedBox(width: 6),
                              Text(
                                timings,
                                style: const TextStyle(
                                  fontSize: 12,
                                  color: Colors.black54,
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                  // Edit Info button moved below the timing section
                  SizedBox(height: 12),
                  Align(
                    alignment: Alignment.centerRight,
                    child: TextButton.icon(
                      onPressed: _editAllInfo,
                      icon: const Icon(Icons.edit_rounded, size: 18),
                      label: const Text('Edit Info'),
                      style: TextButton.styleFrom(
                        padding: EdgeInsets.zero,
                        minimumSize: Size.zero,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),

          // -------- KPIs --------
          // -------- KPIs --------
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Row(
              children: [
                Expanded(
                  child: Material(
                    color: Colors.transparent,
                    borderRadius: BorderRadius.circular(14),
                    child: InkWell(
                      borderRadius: BorderRadius.circular(14),
                      onTap: () => _pushFull(const FollowersPage()),
                      child: AppCard(
                        child: Row(
                          children: [
                            Icon(Icons.group_rounded, color: cs.primary),
                            SizedBox(width: 10),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  '3K',
                                  style: TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w800,
                                  ),
                                ),
                                Text(
                                  'Followers',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: Colors.black54,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
                SizedBox(width: 12),
                Expanded(
                  child: Material(
                    color: Colors.transparent,
                    borderRadius: BorderRadius.circular(14),
                    child: InkWell(
                      borderRadius: BorderRadius.circular(14),
                      onTap: () => _pushFull(const RatingPage()),
                      child: AppCard(
                        child: Row(
                          children: [
                            Icon(Icons.star_rounded, color: cs.primary),
                            SizedBox(width: 10),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  '4.9',
                                  style: TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w800,
                                  ),
                                ),
                                Text(
                                  'Rating',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: Colors.black54,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),

          const SizedBox(height: 12),

          // -------- Feature grid --------
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: GridView(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisSpacing: 12,
                crossAxisSpacing: 12,
                childAspectRatio: 1.35,
              ),
              children: [
                FeatureBox(
                  icon: Icons.photo_library_rounded,
                  title: 'Posts',
                  onTap: () => _pushFull(const PostsPage()),
                ),
                FeatureBox(
                  icon: Icons.inventory_2_rounded,
                  title: 'Products',
                  onTap: () => _pushFull(const ProductsPage()),
                ),
                FeatureBox(
                  icon: Icons.local_offer_rounded,
                  title: 'Offers',
                  onTap: () => _pushFull(const OffersPage()),
                ),
                FeatureBox(
                  icon: Icons.insights_rounded,
                  title: 'Insights',
                  onTap: () => _pushFull(const InsightsPage()),
                ),
              ],
            ),
          ),

          const SizedBox(height: 24),
        ],
      );
  }
}

// ----------------- Shared UI -----------------

class AppCard extends StatelessWidget {
  final Widget child;
  final EdgeInsetsGeometry? padding;
  final double radius;
  const AppCard({
    super.key,
    required this.child,
    this.padding,
    this.radius = 14,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding:
          padding ?? const EdgeInsets.symmetric(horizontal: 14, vertical: 14),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(radius),
        border: Border.all(color: const Color(0xFFE8EAF0)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 6),
          ),
        ],
      ),
      child: child,
    );
  }
}

class FeatureBox extends StatelessWidget {
  final IconData icon;
  final String title;
  final VoidCallback onTap;
  const FeatureBox({
    super.key,
    required this.icon,
    required this.title,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(16),
      child: AppCard(
        radius: 16,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center, // Vertically centered
          children: [
            Icon(icon, size: 28, color: cs.primary),
            const SizedBox(height: 8),
            Text(title, style: const TextStyle(fontWeight: FontWeight.w700)),
          ],
        ),
      ),
    );
  }
}

class _IconLine extends StatelessWidget {
  final IconData icon;
  final String text;
  final VoidCallback? onTap;
  const _IconLine({required this.icon, required this.text, this.onTap});
  @override
  Widget build(BuildContext context) {
    final row = Row(
      children: [
        Icon(icon, size: 16, color: Colors.black45),
        const SizedBox(width: 6),
        Expanded(
          child: Text(
            text,
            style: const TextStyle(fontSize: 13, color: Colors.black87),
          ),
        ),
      ],
    );
    return onTap == null
        ? row
        : InkWell(
            onTap: onTap,
            borderRadius: BorderRadius.circular(6),
            child: Padding(padding: const EdgeInsets.all(2), child: row),
          );
  }
}

// ----------------- Full Pages (dummy) -----------------

class BaseSlidePage extends StatelessWidget {
  final String title;
  final Widget child;
  const BaseSlidePage({super.key, required this.title, required this.child});

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;
    return Scaffold(
      appBar: AppBar(
        title: Text(title),
        backgroundColor: Colors.white,
        surfaceTintColor: Colors.white,
        elevation: 0.5,
        foregroundColor: Colors.black87,
      ),
      body: Container(color: const Color(0xFFF6F7FB), child: child),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Create $title tapped'))),
        icon: const Icon(Icons.add_rounded),
        label: Text('New $title'),
        backgroundColor: cs.primary,
        foregroundColor: Colors.white,
      ),
    );
  }
}

class PostsPage extends StatelessWidget {
  const PostsPage({super.key});
  @override
  Widget build(BuildContext context) {
    return BaseSlidePage(
      title: 'Posts',
      child: GridView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: 9,
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 3,
          mainAxisSpacing: 6,
          crossAxisSpacing: 6,
        ),
        itemBuilder: (_, i) => Container(
          decoration: BoxDecoration(
            color: const Color(0xFFECEFF5),
            borderRadius: BorderRadius.circular(10),
          ),
          child: const Icon(Icons.image_rounded, color: Colors.black38),
        ),
      ),
    );
  }
}

class ProductsPage extends StatelessWidget {
  const ProductsPage({super.key});
  @override
  Widget build(BuildContext context) {
    return BaseSlidePage(
      title: 'Products',
      child: ListView.separated(
        padding: const EdgeInsets.all(16),
        itemCount: 8,
        separatorBuilder: (_, __) => const SizedBox(height: 8),
        itemBuilder: (_, i) => AppCard(
          child: Row(
            children: const [
              _ThumbIcon(),
              SizedBox(width: 12),
              Expanded(child: Text('Sample Product Name')),
              SizedBox(width: 8),
              Text('₹ 249', style: TextStyle(fontWeight: FontWeight.w700)),
            ],
          ),
        ),
      ),
    );
  }
}

class OffersPage extends StatelessWidget {
  const OffersPage({super.key});
  @override
  Widget build(BuildContext context) {
    return BaseSlidePage(
      title: 'Offers',
      child: ListView.separated(
        padding: const EdgeInsets.all(16),
        itemCount: 5,
        separatorBuilder: (_, __) => const SizedBox(height: 10),
        itemBuilder: (_, i) => AppCard(
          radius: 16,
          child: Row(
            children: const [
              Icon(Icons.local_offer_rounded),
              SizedBox(width: 12),
              Expanded(child: Text('Flat 20% off • Aug 1 – Aug 31')),
            ],
          ),
        ),
      ),
    );
  }
}

class InsightsPage extends StatelessWidget {
  const InsightsPage({super.key});
  @override
  Widget build(BuildContext context) {
    return BaseSlidePage(
      title: 'Insights',
      child: ListView(
        padding: const EdgeInsets.all(16),
        children: const [
          AppCard(
            child: _InsightLine(label: 'Weekly Visitors', value: '120'),
          ),
          SizedBox(height: 10),
          AppCard(
            child: _InsightLine(label: 'Top Product', value: 'Milk (2L)'),
          ),
          SizedBox(height: 10),
          AppCard(
            child: _InsightLine(label: 'Repeat Customers (30d)', value: '36%'),
          ),
        ],
      ),
    );
  }
}

class FollowersPage extends StatelessWidget {
  const FollowersPage({super.key});
  @override
  Widget build(BuildContext context) {
    return BaseSlidePage(
      title: 'Followers',
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: 20,
        itemBuilder: (_, i) => ListTile(
          leading: const CircleAvatar(child: Icon(Icons.person)),
          title: Text('Follower #${i + 1}'),
          subtitle: const Text('Joined recently'),
        ),
      ),
    );
  }
}

class OrdersTodayPage extends StatelessWidget {
  const OrdersTodayPage({super.key});
  @override
  Widget build(BuildContext context) {
    return BaseSlidePage(
      title: 'Orders Today',
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: 12,
        itemBuilder: (_, i) => AppCard(
          child: ListTile(
            leading: const Icon(Icons.receipt_long_rounded),
            title: Text('Order #${1000 + i}'),
            subtitle: const Text('2 items • COD'),
            trailing: const Text('₹ 499'),
          ),
        ),
      ),
    );
  }
}

class RatingPage extends StatelessWidget {
  const RatingPage({super.key});
  @override
  Widget build(BuildContext context) {
    return BaseSlidePage(
      title: 'Rating',
      child: ListView.separated(
        padding: const EdgeInsets.all(16),
        itemCount: 5,
        separatorBuilder: (_, __) => const SizedBox(height: 10),
        itemBuilder: (_, i) => AppCard(
          radius: 16,
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: Theme.of(
                context,
              ).colorScheme.primary.withOpacity(0.1),
              child: const Icon(Icons.star_rounded, color: Colors.orange),
            ),
            title: Text('${5 - i}.0 Stars'),
            subtitle: Text('${10 - i} Reviews'),
            trailing: const Icon(Icons.chevron_right_rounded),
          ),
        ),
      ),
    );
  }
}

// ----------------- Small helpers -----------------

class _ThumbIcon extends StatelessWidget {
  const _ThumbIcon();
  @override
  Widget build(BuildContext context) {
    return Container(
      width: 54,
      height: 54,
      decoration: BoxDecoration(
        color: const Color(0xFFECEFF5),
        borderRadius: BorderRadius.circular(10),
      ),
      child: const Icon(Icons.inventory_2_rounded, color: Colors.black38),
    );
  }
}

class _InsightLine extends StatelessWidget {
  final String label;
  final String value;
  const _InsightLine({required this.label, required this.value});
  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Text(label, style: const TextStyle(color: Colors.black54)),
        const Spacer(),
        Text(value, style: const TextStyle(fontWeight: FontWeight.w800)),
      ],
    );
  }
}















































import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class ImprovedBusinessProfile extends StatefulWidget {
  @override
  _ImprovedBusinessProfileState createState() => _ImprovedBusinessProfileState();
}

class _ImprovedBusinessProfileState extends State<ImprovedBusinessProfile>
    with TickerProviderStateMixin {
  bool isShopOpen = true;
  late AnimationController _bannerAnimationController;
  late AnimationController _toggleAnimationController;
  late Animation<double> _bannerScaleAnimation;
  late Animation<double> _toggleScaleAnimation;

  @override
  void initState() {
    super.initState();
    _bannerAnimationController = AnimationController(
      duration: Duration(milliseconds: 200),
      vsync: this,
    );
    _toggleAnimationController = AnimationController(
      duration: Duration(milliseconds: 300),
      vsync: this,
    );
    _bannerScaleAnimation = Tween<double>(begin: 1.0, end: 0.98).animate(
      CurvedAnimation(parent: _bannerAnimationController, curve: Curves.easeInOut),
    );
    _toggleScaleAnimation = Tween<double>(begin: 1.0, end: 0.95).animate(
      CurvedAnimation(parent: _toggleAnimationController, curve: Curves.easeInOut),
    );
  }

  @override
  void dispose() {
    _bannerAnimationController.dispose();
    _toggleAnimationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF8F9FB),
      body: SafeArea(
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  children: [
                    _buildHeader(),
                    _buildProfileCard(),
                    _buildStatsSection(),
                    _buildMenuGrid(),
                  ],
                ),
              ),
            ),
            _buildBottomNavBar(),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      height: 200,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFF667eea),
            Color(0xFF764ba2),
          ],
        ),
      ),
      child: Stack(
        children: [
          // Status Bar
          Positioned(
            top: 16,
            left: 20,
            right: 20,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  "3:14",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                Row(
                  children: [
                    Text("33", style: TextStyle(color: Colors.white, fontSize: 14)),
                    SizedBox(width: 4),
                    Icon(Icons.battery_3_bar, color: Colors.white, size: 20),
                    SizedBox(width: 4),
                    Icon(Icons.signal_cellular_4_bar, color: Colors.white, size: 18),
                    SizedBox(width: 4),
                    Icon(Icons.wifi, color: Colors.white, size: 18),
                  ],
                ),
              ],
            ),
          ),
          
          // Change Banner Button
          Positioned(
            top: 80,
            left: 0,
            right: 0,
            child: Center(
              child: AnimatedBuilder(
                animation: _bannerScaleAnimation,
                builder: (context, child) {
                  return Transform.scale(
                    scale: _bannerScaleAnimation.value,
                    child: GestureDetector(
                      onTap: () {
                        _bannerAnimationController.forward().then((_) {
                          _bannerAnimationController.reverse();
                        });
                        HapticFeedback.lightImpact();
                        _showSnackBar("Change banner photo", Colors.blue);
                      },
                      child: Container(
                        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.95),
                          borderRadius: BorderRadius.circular(25),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.1),
                              blurRadius: 15,
                              offset: Offset(0, 5),
                            ),
                          ],
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(Icons.camera_alt, size: 18, color: Color(0xFF333333)),
                            SizedBox(width: 8),
                            Text(
                              "Change Banner",
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w600,
                                color: Color(0xFF333333),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProfileCard() {
    return Container(
      margin: EdgeInsets.fromLTRB(20, -40, 20, 0),
      child: Card(
        elevation: 12,
        shadowColor: Colors.black.withOpacity(0.15),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        child: Container(
          padding: EdgeInsets.all(24),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            children: [
              Row(
                children: [
                  // Avatar
                  Stack(
                    children: [
                      Container(
                        width: 70,
                        height: 70,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Color(0xFFE8EAF6),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.1),
                              blurRadius: 10,
                              offset: Offset(0, 4),
                            ),
                          ],
                        ),
                        child: Icon(
                          Icons.person,
                          size: 32,
                          color: Color(0xFF9E9E9E),
                        ),
                      ),
                      Positioned(
                        bottom: 0,
                        right: 0,
                        child: GestureDetector(
                          onTap: () {
                            HapticFeedback.lightImpact();
                            _showSnackBar("Change profile photo", Colors.blue);
                          },
                          child: Container(
                            width: 24,
                            height: 24,
                            decoration: BoxDecoration(
                              color: Color(0xFF667eea),
                              shape: BoxShape.circle,
                              border: Border.all(color: Colors.white, width: 2),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black.withOpacity(0.1),
                                  blurRadius: 4,
                                  offset: Offset(0, 2),
                                ),
                              ],
                            ),
                            child: Icon(
                              Icons.add,
                              size: 14,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  
                  SizedBox(width: 16),
                  
                  // Business Info
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "Tech Haven Electronics",
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.w800,
                            color: Color(0xFF1A1A1A),
                            height: 1.2,
                          ),
                        ),
                        SizedBox(height: 8),
                        _buildInfoRow(Icons.phone_outlined, "+91 98765 43210"),
                        SizedBox(width: 8),
                        _buildInfoRow(Icons.location_on_outlined, "456 Innovation Drive, Pune"),
                      ],
                    ),
                  ),
                  
                  // Status Toggle
                  Column(
                    children: [
                      Text(
                        "Open",
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                          color: Color(0xFF4CAF50),
                        ),
                      ),
                      SizedBox(height: 8),
                      AnimatedBuilder(
                        animation: _toggleScaleAnimation,
                        builder: (context, child) {
                          return Transform.scale(
                            scale: _toggleScaleAnimation.value,
                            child: GestureDetector(
                              onTap: _toggleShopStatus,
                              child: AnimatedContainer(
                                duration: Duration(milliseconds: 300),
                                width: 60,
                                height: 32,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(16),
                                  gradient: LinearGradient(
                                    colors: isShopOpen
                                        ? [Color(0xFF4CAF50), Color(0xFF45A049)]
                                        : [Color(0xFFE0E0E0), Color(0xFFBDBDBD)],
                                  ),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.15),
                                      blurRadius: 8,
                                      offset: Offset(0, 3),
                                    ),
                                  ],
                                ),
                                child: AnimatedAlign(
                                  duration: Duration(milliseconds: 300),
                                  alignment: isShopOpen ? Alignment.centerRight : Alignment.centerLeft,
                                  child: Container(
                                    width: 26,
                                    height: 26,
                                    margin: EdgeInsets.all(3),
                                    decoration: BoxDecoration(
                                      shape: BoxShape.circle,
                                      color: Colors.white,
                                      boxShadow: [
                                        BoxShadow(
                                          color: Colors.black.withOpacity(0.2),
                                          blurRadius: 4,
                                          offset: Offset(0, 2),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          );
                        },
                      ),
                      SizedBox(height: 8),
                      Container(
                        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                        decoration: BoxDecoration(
                          color: Color(0xFFF0F8FF),
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Color(0xFFE3F2FD)),
                        ),
                        child: Text(
                          "10:00 AM - 9:00 PM",
                          style: TextStyle(
                            fontSize: 11,
                            color: Color(0xFF1976D2),
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              
              SizedBox(height: 20),
              
              // Edit Info Button
              GestureDetector(
                onTap: () => _showSnackBar("Edit business info", Colors.blue),
                child: Container(
                  width: double.infinity,
                  padding: EdgeInsets.symmetric(vertical: 12),
                  decoration: BoxDecoration(
                    color: Color(0xFFF8F9FA),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Color(0xFFE9ECEF)),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.edit_outlined, size: 18, color: Color(0xFF6C757D)),
                      SizedBox(width: 8),
                      Text(
                        "Edit Info",
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                          color: Color(0xFF6C757D),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildInfoRow(IconData icon, String text) {
    return Padding(
      padding: EdgeInsets.only(bottom: 4),
      child: Row(
        children: [
          Icon(icon, size: 16, color: Color(0xFF9E9E9E)),
          SizedBox(width: 8),
          Expanded(
            child: Text(
              text,
              style: TextStyle(
                fontSize: 13,
                color: Color(0xFF757575),
                height: 1.3,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatsSection() {
    return Padding(
      padding: EdgeInsets.all(20),
      child: Row(
        children: [
          Expanded(
            child: _buildStatCard(
              icon: Icons.people_outline,
              value: "3K",
              label: "Followers",
              color: Color(0xFF667eea),
            ),
          ),
          SizedBox(width: 16),
          Expanded(
            child: _buildStatCard(
              icon: Icons.star_outline,
              value: "4.9",
              label: "Rating",
              color: Color(0xFFFFB300),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard({
    required IconData icon,
    required String value,
    required String label,
    required Color color,
  }) {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.06),
            blurRadius: 12,
            offset: Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            width: 48,
            height: 48,
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(icon, color: color, size: 24),
          ),
          SizedBox(height: 12),
          Text(
            value,
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.w800,
              color: Color(0xFF1A1A1A),
            ),
          ),
          Text(
            label,
            style: TextStyle(
              fontSize: 14,
              color: Color(0xFF9E9E9E),
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMenuGrid() {
    final menuItems = [
      {"icon": Icons.photo_library_outlined, "label": "Posts", "color": Color(0xFF667eea)},
      {"icon": Icons.inventory_2_outlined, "label": "Products", "color": Color(0xFF26A69A)},
      {"icon": Icons.local_offer_outlined, "label": "Offers", "color": Color(0xFFFF7043)},
      {"icon": Icons.trending_up_outlined, "label": "Insights", "color": Color(0xFF42A5F5)},
    ];

    return Padding(
      padding: EdgeInsets.fromLTRB(20, 0, 20, 20),
      child: GridView.builder(
        shrinkWrap: true,
        physics: NeverScrollableScrollPhysics(),
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
          childAspectRatio: 1.2,
        ),
        itemCount: menuItems.length,
        itemBuilder: (context, index) {
          final item = menuItems[index];
          return GestureDetector(
            onTap: () {
              HapticFeedback.selectionClick();
              _showSnackBar("${item['label']} clicked", item['color'] as Color);
            },
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.06),
                    blurRadius: 12,
                    offset: Offset(0, 4),
                  ),
                ],
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Container(
                    width: 56,
                    height: 56,
                    decoration: BoxDecoration(
                      color: (item['color'] as Color).withOpacity(0.1),
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Icon(
                      item['icon'] as IconData,
                      color: item['color'] as Color,
                      size: 28,
                    ),
                  ),
                  SizedBox(height: 12),
                  Text(
                    item['label'] as String,
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: Color(0xFF1A1A1A),
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildBottomNavBar() {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 12,
            offset: Offset(0, -4),
          ),
        ],
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          _buildNavItem(Icons.home_outlined, "HOME", false),
          _buildNavItem(Icons.receipt_long_outlined, "ORDERS", false),
          _buildNavItem(Icons.grid_view_outlined, "LISTING", false),
          _buildNavItem(Icons.person, "PROFILE", true),
        ],
      ),
    );
  }

  Widget _buildNavItem(IconData icon, String label, bool isActive) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(
          icon,
          color: isActive ? Color(0xFF26C6DA) : Color(0xFF9E9E9E),
          size: 24,
        ),
        SizedBox(height: 4),
        Text(
          label,
          style: TextStyle(
            fontSize: 11,
            fontWeight: FontWeight.w600,
            color: isActive ? Color(0xFF26C6DA) : Color(0xFF9E9E9E),
          ),
        ),
      ],
    );
  }

  void _toggleShopStatus() {
    HapticFeedback.mediumImpact();
    _toggleAnimationController.forward().then((_) {
      _toggleAnimationController.reverse();
    });
    
    setState(() {
      isShopOpen = !isShopOpen;
    });
    
    _showSnackBar(
      'Shop is now ${isShopOpen ? "Open" : "Closed"}!',
      isShopOpen ? Color(0xFF4CAF50) : Color(0xFFFF5252),
    );
  }

  void _showSnackBar(String message, Color color) {
    ScaffoldMessenger.of(context).hideCurrentSnackBar();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          style: TextStyle(fontWeight: FontWeight.w600),
        ),
        backgroundColor: color,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        margin: EdgeInsets.all(16),
        duration: Duration(seconds: 2),
      ),
    );
  }
}

// Usage
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Business Profile',
      theme: ThemeData(
        fontFamily: 'SF Pro Display',
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: ImprovedBusinessProfile(),
      debugShowCheckedModeBanner: false,
    );
  }
}

void main() {
  runApp(MyApp());
}









































//listing page code
import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // Required for FilteringTextInputFormatter

void main() {
  runApp(const MyApp());
}

/// Root App
class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: ListingApp(),
    );
  }
}

/// Data Model
class Listing {
  int id;
  String title;
  String price; // Stored as a string of digits, e.g., "123"
  String status;
  String description;
  String imageUrl;

  Listing({
    required this.id,
    required this.title,
    required this.price,
    required this.status,
    required this.description,
    required this.imageUrl,
  });
}

/// Main Page
class ListingApp extends StatefulWidget {
  const ListingApp({super.key});

  @override
  State<ListingApp> createState() => _ListingAppState();
}

class _ListingAppState extends State<ListingApp> {
  List<Listing> listings = [];

  void openForm({Listing? editListing}) async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute<Listing>(
        builder: (_) => ListingForm(editListing: editListing),
      ),
    );

    if (result != null && result is Listing) {
      setState(() {
        if (editListing != null) {
          // Update existing
          final int index = listings.indexWhere((Listing l) => l.id == editListing.id);
          if (index != -1) {
            listings[index] = result;
          }
        } else {
          // Add new
          listings.add(result);
        }
      });
    }
  }

  void deleteListing(int id) {
    setState(() {
      listings.removeWhere((Listing l) => l.id == id);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("My Listings"),
        backgroundColor: Colors.blue,
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => openForm(),
          )
        ],
      ),
      body: listings.isEmpty
          ? const Center(child: Text("No listings yet"))
          : ListView.builder(
              padding: const EdgeInsets.all(12),
              itemCount: listings.length,
              itemBuilder: (BuildContext context, int index) {
                final Listing listing = listings[index];
                return Card(
                  margin: const EdgeInsets.symmetric(vertical: 8),
                  child: ListTile(
                    leading: Image.network(
                      listing.imageUrl,
                      width: 60,
                      height: 60,
                      fit: BoxFit.cover,
                      errorBuilder: (BuildContext context, Object error, StackTrace? stackTrace) =>
                          const Icon(Icons.image, size: 40),
                    ),
                    title: Text(listing.title,
                        style: const TextStyle(
                            fontWeight: FontWeight.bold, fontSize: 16)),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text("₹${listing.price}"), // Rupee sign prefixed for display
                        Text("Status: ${listing.status}"),
                        Text(listing.description,
                            maxLines: 2, overflow: TextOverflow.ellipsis),
                      ],
                    ),
                    trailing: PopupMenuButton<String>(
                      onSelected: (String value) {
                        if (value == "edit") {
                          openForm(editListing: listing);
                        } else if (value == "delete") {
                          deleteListing(listing.id);
                        }
                      },
                      itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
                        const PopupMenuItem<String>(
                            value: "edit", child: Text("Edit")),
                        const PopupMenuItem<String>(
                            value: "delete", child: Text("Delete")),
                      ],
                    ),
                  ),
                );
              },
            ),
    );
  }
}

/// Form Page
class ListingForm extends StatefulWidget {
  final Listing? editListing;
  const ListingForm({super.key, this.editListing});

  @override
  State<ListingForm> createState() => _ListingFormState();
}

class _ListingFormState extends State<ListingForm> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController titleController;
  late TextEditingController priceController;
  late TextEditingController descController;
  late TextEditingController imageController;
  String status = "In Stock";

  @override
  void initState() {
    super.initState();
    titleController =
        TextEditingController(text: widget.editListing?.title ?? "");
    priceController =
        TextEditingController(text: widget.editListing?.price ?? ""); // Price is stored as just numbers
    descController =
        TextEditingController(text: widget.editListing?.description ?? "");
    imageController =
        TextEditingController(text: widget.editListing?.imageUrl ?? "");
    status = widget.editListing?.status ?? "In Stock";
  }

  @override
  void dispose() {
    titleController.dispose();
    priceController.dispose();
    descController.dispose();
    imageController.dispose();
    super.dispose();
  }

  void handleSave() {
    if (_formKey.currentState!.validate()) {
      final Listing listing = Listing(
        id: widget.editListing?.id ?? DateTime.now().millisecondsSinceEpoch,
        title: titleController.text,
        price: priceController.text, // Store price as just numbers
        status: status,
        description: descController.text,
        imageUrl: imageController.text.isNotEmpty
            ? imageController.text
            : "https://www.gstatic.com/flutter-onestack-prototype/genui/example_1.jpg",
      );
      Navigator.pop(context, listing);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.editListing != null
            ? "Edit Listing"
            : "Create New Listing"),
        backgroundColor: Colors.blue,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              // Image URL
              TextFormField(
                controller: imageController,
                decoration: const InputDecoration(
                  labelText: "Image URL",
                ),
              ),
              const SizedBox(height: 12),
              // Title - Allows letters, numbers, and special characters, and is required
              TextFormField(
                controller: titleController,
                decoration: const InputDecoration(labelText: "Title *"),
                validator: (String? val) =>
                    val == null || val.isEmpty ? "Title is required" : null,
              ),
              const SizedBox(height: 12),
              // Price - Only numbers, with rupee sign display
              TextFormField(
                controller: priceController,
                keyboardType: TextInputType.number, // Numeric keyboard
                inputFormatters: <TextInputFormatter>[
                  FilteringTextInputFormatter.digitsOnly // Only allow digits
                ],
                decoration: const InputDecoration(
                  labelText: "Price *",
                  prefixText: '₹', // Display rupee sign
                ),
                validator: (String? val) {
                  if (val == null || val.isEmpty) {
                    return "Price is required";
                  }
                  // FilteringTextInputFormatter.digitsOnly ensures only digits are entered.
                  return null;
                },
              ),
              const SizedBox(height: 12),
              // Status Dropdown
              DropdownButtonFormField<String>(
                value: status,
                decoration: const InputDecoration(labelText: "Availability"),
                items: const <DropdownMenuItem<String>>[
                  DropdownMenuItem<String>(value: "In Stock", child: Text("In Stock")),
                  DropdownMenuItem<String>(
                      value: "Out of Stock", child: Text("Out of Stock")),
                  DropdownMenuItem<String>(value: "Available", child: Text("Available")),
                  DropdownMenuItem<String>(value: "Busy", child: Text("Busy")),
                ],
                onChanged: (String? val) {
                  if (val != null) {
                    setState(() {
                      status = val;
                    });
                  }
                },
                validator: (String? val) => val == null || val.isEmpty ? "Availability is required" : null,
              ),
              const SizedBox(height: 12),
              // Description
              TextFormField(
                controller: descController,
                maxLines: 3,
                decoration: const InputDecoration(labelText: "Description *"),
                validator: (String? val) =>
                    val == null || val.isEmpty ? "Description is required" : null,
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: handleSave,
                style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white, // Text color for the button
                    padding: const EdgeInsets.all(16)),
                child: Text(widget.editListing != null
                    ? "Update Listing"
                    : "Create Listing"),
              )
            ],
          ),
        ),
      ),
    );
  }
}














































// listing code
import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // Required for FilteringTextInputFormatter

void main() {
  runApp(const MyApp());
}

/// Root App
class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: ListingApp(),
    );
  }
}

/// Data Model
class Listing {
  int id;
  String title;
  String price; // Stored as a string of digits, e.g., "123"
  String status;
  String description;
  String imageUrl;

  Listing({
    required this.id,
    required this.title,
    required this.price,
    required this.status,
    required this.description,
    required this.imageUrl,
  });
}

/// Main Page
class ListingApp extends StatefulWidget {
  const ListingApp({super.key});

  @override
  State<ListingApp> createState() => _ListingAppState();
}

class _ListingAppState extends State<ListingApp> {
  List<Listing> listings = [];

  void openForm({Listing? editListing}) async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute<Listing>(
        builder: (_) => ListingForm(editListing: editListing),
      ),
    );

    if (result is Listing) {
      setState(() {
        if (editListing != null) {
          // Update existing
          final int index = listings.indexWhere((Listing l) => l.id == editListing.id);
          if (index != -1) {
            listings[index] = result;
          }
        } else {
          // Add new
          listings.add(result);
        }
      });
    }
  }

  void deleteListing(int id) {
    setState(() {
      listings.removeWhere((Listing l) => l.id == id);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("My Listings"),
        backgroundColor: Colors.blue,
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => openForm(),
          )
        ],
      ),
      body: listings.isEmpty
          ? const Center(child: Text("No listings yet"))
          : ListView.builder(
              padding: const EdgeInsets.all(12),
              itemCount: listings.length,
              itemBuilder: (BuildContext context, int index) {
                final Listing listing = listings[index];
                return Card(
                  margin: const EdgeInsets.symmetric(vertical: 8),
                  child: ListTile(
                    leading: Image.network(
                      listing.imageUrl,
                      width: 60,
                      height: 60,
                      fit: BoxFit.cover,
                      errorBuilder: (BuildContext context, Object error, StackTrace? stackTrace) =>
                          const Icon(Icons.image, size: 40),
                    ),
                    title: Text(listing.title,
                        style: const TextStyle(
                            fontWeight: FontWeight.bold, fontSize: 16)),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text("₹${listing.price}"), // Rupee sign prefixed for display
                        Text("Status: ${listing.status}"),
                        Text(listing.description,
                            maxLines: 2, overflow: TextOverflow.ellipsis),
                      ],
                    ),
                    trailing: PopupMenuButton<String>(
                      onSelected: (String value) {
                        if (value == "edit") {
                          openForm(editListing: listing);
                        } else if (value == "delete") {
                          deleteListing(listing.id);
                        }
                      },
                      itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
                        const PopupMenuItem<String>(
                            value: "edit", child: Text("Edit")),
                        const PopupMenuItem<String>(
                            value: "delete", child: Text("Delete")),
                      ],
                    ),
                  ),
                );
              },
            ),
    );
  }
}

/// Form Page
class ListingForm extends StatefulWidget {
  final Listing? editListing;
  const ListingForm({super.key, this.editListing});

  @override
  State<ListingForm> createState() => _ListingFormState();
}

class _ListingFormState extends State<ListingForm> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController titleController;
  late TextEditingController priceController;
  late TextEditingController descController;
  late TextEditingController imageController;
  String status = "In Stock";

  @override
  void initState() {
    super.initState();
    titleController =
        TextEditingController(text: widget.editListing?.title ?? "");
    priceController =
        TextEditingController(text: widget.editListing?.price ?? ""); // Price is stored as just numbers
    descController =
        TextEditingController(text: widget.editListing?.description ?? "");
    imageController =
        TextEditingController(text: widget.editListing?.imageUrl ?? "");
    status = widget.editListing?.status ?? "In Stock";
  }

  @override
  void dispose() {
    titleController.dispose();
    priceController.dispose();
    descController.dispose();
    imageController.dispose();
    super.dispose();
  }

  void handleSave() {
    if (_formKey.currentState!.validate()) {
      final Listing listing = Listing(
        id: widget.editListing?.id ?? DateTime.now().millisecondsSinceEpoch,
        title: titleController.text,
        price: priceController.text, // Store price as just numbers
        status: status,
        description: descController.text,
        imageUrl: imageController.text.isNotEmpty
            ? imageController.text
            : "https://www.gstatic.com/flutter-onestack-prototype/genui/example_1.jpg",
      );
      Navigator.pop(context, listing);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.editListing != null
            ? "Edit Listing"
            : "Create New Listing"),
        backgroundColor: Colors.blue,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              // Image URL
              TextFormField(
                controller: imageController,
                decoration: const InputDecoration(
                  labelText: "Image URL",
                ),
              ),
              const SizedBox(height: 12),
              // Title - Allows letters, numbers, and special characters, and is required
              TextFormField(
                controller: titleController,
                decoration: const InputDecoration(labelText: "Title *"),
                validator: (String? val) =>
                    val == null || val.isEmpty ? "Title is required" : null,
              ),
              const SizedBox(height: 12),
              // Price - Only numbers, with rupee sign display
              TextFormField(
                controller: priceController,
                keyboardType: TextInputType.number, // Numeric keyboard
                inputFormatters: <TextInputFormatter>[
                  FilteringTextInputFormatter.digitsOnly // Only allow digits
                ],
                decoration: const InputDecoration(
                  labelText: "Price *",
                  prefixText: '₹', // Display rupee sign
                ),
                validator: (String? val) {
                  if (val == null || val.isEmpty) {
                    return "Price is required";
                  }
                  // FilteringTextInputFormatter.digitsOnly ensures only digits are entered.
                  return null;
                },
              ),
              const SizedBox(height: 12),
              // Status Dropdown
              DropdownButtonFormField<String>(
                initialValue: status,
                decoration: const InputDecoration(labelText: "Availability"),
                items: const <DropdownMenuItem<String>>[
                  DropdownMenuItem<String>(value: "In Stock", child: Text("In Stock")),
                  DropdownMenuItem<String>(
                      value: "Out of Stock", child: Text("Out of Stock")),
                  DropdownMenuItem<String>(value: "Available", child: Text("Available")),
                  DropdownMenuItem<String>(value: "Busy", child: Text("Busy")),
                ],
                onChanged: (String? val) {
                  if (val != null) {
                    setState(() {
                      status = val;
                    });
                  }
                },
                validator: (String? val) => val == null || val.isEmpty ? "Availability is required" : null,
              ),
              const SizedBox(height: 12),
              // Description
              TextFormField(
                controller: descController,
                maxLines: 3,
                decoration: const InputDecoration(labelText: "Description *"),
                validator: (String? val) =>
                    val == null || val.isEmpty ? "Description is required" : null,
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: handleSave,
                style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white, // Text color for the button
                    padding: const EdgeInsets.all(16)),
                child: Text(widget.editListing != null
                    ? "Update Listing"
                    : "Create Listing"),
              )
            ],
          ),
        ),
      ),
    );
  }
}